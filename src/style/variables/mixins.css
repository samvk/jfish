// ==================================================================
// MIXINS
// ==================================================================//

// ==================================================================
// INCLUDES:
//
// Mixins:
// * custom-media queries
// * --color-transition
// * hover{} state
// * active{} state
// * hr(color, height, width) shorthand
// * center-abs(position)
// * pseudo(pos){} element maker
// * underline(color, size)
// * height-line(height, adjust)
// * fade-in(position, duration){} mixin
//
// ==================================================================//

// media queries breakpoints
// Note: also defined in 'store/reducers'
$sm-min: 576;
$md-min: 768;
$lg-min: 992;
$xl-min: 1200;

@custom-media --sm-min (min-width: $(sm-min)px);
@custom-media --md-min (min-width: $(md-min)px);
@custom-media --lg-min (min-width: $(lg-min)px);
@custom-media --xl-min (min-width: $(xl-min)px);

:root {
    --color-transition: {
        transition: color 150ms linear, background-color 150ms linear;
    };
}

// HOVER and ACTIVE(allow common color arguments or content)
// includes :active until overwritten
@mixin hover($color: null, $background: null) {
    @apply --color-transition;

    &:hover,
    &:active {
        color: $color;
        background-color: $background;
        @content;
    }
}

@mixin active($color: null, $background: null) {
    &:active {
        color: $color;
        background-color: $background;
        @content;
    }
}

@mixin hr($color, $height: null, $width: null) {
    hr {
        background-color: $color;
        height: $height;
        width: $width;
    }
}

@mixin center-abs($position: x) {
    @if $position == x {
        left: 50%;
        transform: translateX(-50%);
    } @else if $position == y {
        top: 50%;
        transform: translateY(-50%);
    } @else if $position == both {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin pseudo($position: before, $content: '') {
    @if $position == before OR $position == after {
        &:$position {
            position: absolute;
            display: block;
            content: $content;

            @content;
        }
    } @else {
        @console.error "$position" is not a valid pseudo-element;
    }
}

@mixin underline($color, $size: 3px, $type: solid) {
    border-bottom: $size $type $color;
}

// FIXME: is not converting units correctly (both values MUST be serves as same unit)
// adjust = border + padding (remember to double when required)
@mixin height-line($height, $adjust: 0px) {
    height: $height;
    line-height: resolve($height - $adjust);
}

// NOTE: This mixin requires a "fade-in" class added to trigger
@mixin fade-in($position: inherit, $duration: 1000ms, $ease: ease) {
    // design
    filter: opacity(0%);
    visibility: hidden;
    overflow: hidden;

    // layout
    position: absolute;

    // animation
    transition: opacity $duration $ease, visibility 0ms $duration;

    &.fade-in {
        // design
        filter: opacity(100%);
        visibility: visible;

        // layout
        position: $position;

        // animation
        transition-delay: 0ms;
    }
}
